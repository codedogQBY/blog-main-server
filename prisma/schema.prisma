generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String           @id @default(uuid()) @db.Char(36)
  name      String           @unique @db.VarChar(50)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
  perms     RolePermission[]
  users     User[]
}

model PermissionGroup {
  id          String       @id @default(uuid()) @db.Char(36)
  name        String       @db.VarChar(100)
  code        String       @unique @db.VarChar(100)
  description String?      @db.Text
  sort        Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  permissions Permission[]

  @@map("permission_groups")
}

model Permission {
  id          String           @id @default(uuid()) @db.Char(36)
  name        String           @db.VarChar(100)
  code        String           @unique @db.VarChar(100)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  description String?          @db.Text
  groupId     String?          @db.Char(36)
  group       PermissionGroup? @relation(fields: [groupId], references: [id])
  roles       RolePermission[]

  @@index([groupId], map: "permissions_groupId_fkey")
}

model RolePermission {
  roleId       String     @db.Char(36)
  permissionId String     @db.Char(36)
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model User {
  id               String    @id @default(uuid()) @db.Char(36)
  name             String    @db.VarChar(50)
  mail             String    @unique @db.VarChar(100)
  passwordHash     String    @db.VarChar(255)
  isSuperAdmin     Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  roleId           String?   @db.Char(36)
  backupCodes      String?   @db.Text
  twoFactorEnabled Boolean   @default(false)
  twoFactorSecret  String?   @db.VarChar(255)
  twoFactorSetupAt DateTime?
  articles         Article[]
  files            File[]
  role             Role?     @relation(fields: [roleId], references: [id])

  // 2FA辅助表反向关系
  twoFactorAttempts TwoFactorAttempt[]
  userLocks         UserLock[]
  twoFactorRecoveries TwoFactorRecovery[]
  twoFactorLogs     TwoFactorLog[]   @relation("UserLog")
  adminLogs         TwoFactorLog[]   @relation("AdminLog")

  @@index([mail])
  @@index([roleId], map: "users_roleId_fkey")
  @@map("users")
}

model VerificationCode {
  id        String   @id @default(uuid())
  mail      String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("verification_codes")
}

model Category {
  id              String     @id @default(uuid())
  name            String     @unique
  description     String?
  slug            String     @unique
  parentId        String?
  status          String     @default("enabled")
  sort            Int        @default(0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  articles        Article[]
  parentCategory  Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  childCategories Category[] @relation("CategoryParent")

  @@index([parentId], map: "categories_parentId_fkey")
  @@map("categories")
}

model Tag {
  id          String       @id @default(uuid())
  name        String       @unique
  slug        String       @unique
  description String?
  color       String?
  sort        Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  articles    ArticleTag[]

  @@map("tags")
}

model Article {
  id              String       @id @default(uuid())
  title           String
  content         String       @db.Text
  excerpt         String?
  coverImage      String?
  slug            String       @unique
  published       Boolean      @default(false)
  views           Int          @default(0)
  readTime        Int?
  publishedAt     DateTime?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  authorId        String
  categoryId      String
  canonicalUrl    String?      @db.VarChar(500)
  metaDescription String?      @db.Text
  metaKeywords    String?      @db.Text
  metaTitle       String?      @db.VarChar(255)
  tags            ArticleTag[]
  author          User         @relation(fields: [authorId], references: [id])
  category        Category     @relation(fields: [categoryId], references: [id])
  likes           Like[]

  @@index([authorId], map: "articles_authorId_fkey")
  @@index([categoryId], map: "articles_categoryId_fkey")
  @@map("articles")
}

model ArticleTag {
  id        String  @id @default(uuid())
  articleId String
  tagId     String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([articleId, tagId])
  @@index([tagId], map: "article_tags_tagId_fkey")
  @@map("article_tags")
}

model FileFolder {
  id        String       @id @default(uuid())
  name      String
  path      String       @unique
  parentId  String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  parent    FileFolder?  @relation("FolderParent", fields: [parentId], references: [id])
  children  FileFolder[] @relation("FolderParent")
  files     File[]

  @@index([parentId], map: "file_folders_parentId_fkey")
  @@map("file_folders")
}

model File {
  id         String      @id @default(uuid())
  name       String      @db.Text
  filename   String      @db.Text
  path       String      @db.Text
  url        String      @db.Text
  size       Int
  mimetype   String
  extension  String
  folderId   String?
  uploadedBy String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  folder     FileFolder? @relation(fields: [folderId], references: [id])
  uploader   User        @relation(fields: [uploadedBy], references: [id])

  @@index([folderId], map: "files_folderId_fkey")
  @@index([uploadedBy], map: "files_uploadedBy_fkey")
  @@map("files")
}

model StickyNote {
  id        String               @id @default(uuid())
  content   String               @db.Text
  author    String
  category  String?
  color     String               @default("#fbbf24")
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  status    String               @default("public")
  comments  InteractionComment[]
  likes     Like[]

  @@map("sticky_notes")
}

model DiaryNote {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(200)
  content   String   @db.Text
  excerpt   String?  @db.VarChar(500)
  images    String?  @db.Text
  weather   String   @default("sunny")
  mood      Int      @default(0)
  status    String   @default("public")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("diary_notes")
}

model DiarySignature {
  id            String   @id @default(uuid())
  signatureName String   @db.VarChar(50)
  fontFamily    String   @default("'Kalam', cursive")
  fontSize      String   @default("2xl")
  color         String   @default("gray-400")
  rotation      String   @default("12")
  isActive      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("diary_signatures")
}

model DiaryWeatherConfig {
  id          String   @id @default(uuid())
  weatherType String   @unique
  weatherName String   @db.VarChar(32)
  icon        String?  @db.VarChar(100)
  description String?  @db.VarChar(200)
  isEnabled   Boolean  @default(true)
  sort        Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("diary_weather_config")
}

model Gallery {
  id          String               @id @default(uuid())
  title       String
  description String?              @db.Text
  category    String?
  tags        String?              @db.Text
  coverImage  String?
  status      String               @default("published")
  sort        Int                  @default(0)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  images      GalleryImage[]
  comments    InteractionComment[] @relation("GalleryComments")
  likes       Like[]               @relation("GalleryLikes")

  @@map("galleries")
}

model GalleryImage {
  id          String   @id @default(uuid())
  title       String?
  description String?  @db.Text
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  galleryId   String
  sort        Int      @default(0)
  gallery     Gallery  @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  @@index([galleryId], map: "gallery_images_galleryId_fkey")
  @@map("gallery_images")
}

model Like {
  id           String      @id @default(uuid())
  fingerprint  String
  targetType   String
  targetId     String
  articleId    String?
  stickyNoteId String?
  userInfoId   String?
  createdAt    DateTime    @default(now())
  galleryId    String?
  article      Article?    @relation(fields: [articleId], references: [id], onDelete: Cascade)
  gallery      Gallery?    @relation("GalleryLikes", fields: [galleryId], references: [id], onDelete: Cascade)
  stickyNote   StickyNote? @relation(fields: [stickyNoteId], references: [id], onDelete: Cascade)
  userInfo     UserInfo?   @relation(fields: [userInfoId], references: [id])

  @@unique([fingerprint, targetType, targetId])
  @@index([articleId], map: "likes_articleId_fkey")
  @@index([galleryId], map: "likes_galleryId_fkey")
  @@index([stickyNoteId], map: "likes_stickyNoteId_fkey")
  @@index([userInfoId], map: "likes_userInfoId_fkey")
  @@map("likes")
}

model InteractionComment {
  id           String               @id @default(uuid())
  content      String               @db.Text
  author       String?
  email        String?
  fingerprint  String
  targetType   String
  targetId     String
  stickyNoteId String?
  parentId     String?
  userInfoId   String?
  isApproved   Boolean              @default(true)
  isDeleted    Boolean              @default(false)
  deletedAt    DateTime?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  galleryId    String?
  isAdmin      Boolean              @default(false)
  gallery      Gallery?             @relation("GalleryComments", fields: [galleryId], references: [id], onDelete: Cascade)
  parent       InteractionComment?  @relation("InteractionCommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies      InteractionComment[] @relation("InteractionCommentReplies")
  stickyNote   StickyNote?          @relation(fields: [stickyNoteId], references: [id], onDelete: Cascade)
  userInfo     UserInfo?            @relation(fields: [userInfoId], references: [id])

  @@index([galleryId], map: "interaction_comments_galleryId_fkey")
  @@index([parentId], map: "interaction_comments_parentId_fkey")
  @@index([stickyNoteId], map: "interaction_comments_stickyNoteId_fkey")
  @@index([userInfoId], map: "interaction_comments_userInfoId_fkey")
  @@map("interaction_comments")
}

model UserInfo {
  id             String               @id @default(uuid())
  fingerprint    String               @unique
  ipAddress      String?
  userAgent      String?              @db.Text
  country        String?
  region         String?
  city           String?
  latitude       Float?
  longitude      Float?
  timezone       String?
  deviceType     String?
  deviceModel    String?
  osName         String?
  osVersion      String?
  browserName    String?
  browserVersion String?
  screenWidth    Int?
  screenHeight   Int?
  language       String?
  languages      String?
  nickname       String?
  email          String?
  totalLikes     Int                  @default(0)
  totalComments  Int                  @default(0)
  lastActiveAt   DateTime             @default(now())
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  comments       InteractionComment[]
  likes          Like[]

  @@map("user_info")
}

model Admin {
  id          String    @id @default(uuid())
  username    String    @unique
  password    String
  email       String    @unique
  role        String    @default("admin")
  isActive    Boolean   @default(true)
  permissions String?   @db.Text
  lastLoginAt DateTime?
  loginCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("admins")
}

model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String   @db.Text
  type        String   @default("string")
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}

model ActivityLog {
  id          String   @id @default(uuid())
  action      String
  targetType  String
  targetId    String
  fingerprint String?
  userInfoId  String?
  adminId     String?
  details     String?  @db.Text
  ipAddress   String?
  userAgent   String?  @db.Text
  createdAt   DateTime @default(now())

  @@map("activity_logs")
}

model About {
  id            String         @id @default(uuid())
  heroAvatar    String?        @db.Text
  heroSignature String?        @db.VarChar(200)
  introTitle    String         @db.VarChar(200)
  introContent  String         @db.Text
  introLogo     String?        @db.Text
  status        String         @default("active")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  sections      AboutSection[]
  tags          AboutTag[]

  @@map("about")
}

model AboutTag {
  id        String   @id @default(uuid())
  content   String   @db.VarChar(100)
  position  String   @default("left")
  sort      Int      @default(0)
  aboutId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  about     About    @relation(fields: [aboutId], references: [id], onDelete: Cascade)

  @@index([aboutId], map: "about_tags_aboutId_fkey")
  @@map("about_tags")
}

model AboutSection {
  id        String       @id @default(uuid())
  title     String       @db.VarChar(200)
  content   String       @db.Text
  sort      Int          @default(0)
  aboutId   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  images    AboutImage[]
  about     About        @relation(fields: [aboutId], references: [id], onDelete: Cascade)

  @@index([aboutId], map: "about_sections_aboutId_fkey")
  @@map("about_sections")
}

model AboutImage {
  id        String       @id @default(uuid())
  src       String       @db.Text
  alt       String       @db.VarChar(200)
  caption   String       @db.VarChar(200)
  sort      Int          @default(0)
  sectionId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  section   AboutSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId], map: "about_images_sectionId_fkey")
  @@map("about_images")
}

model FriendLink {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(50)
  url         String   @db.VarChar(255)
  logo        String?  @db.VarChar(255)
  description String?  @db.VarChar(255)
  status      Int      @default(1)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  auditStatus Int      @default(0)
  email       String?  @db.VarChar(255)

  @@map("friend_links")
}

model SystemLog {
  id             String   @id @default(uuid())
  timestamp      DateTime @default(now())
  level          String
  source         String
  category       String
  message        String   @db.Text
  details        String?  @db.Text
  stack          String?  @db.Text
  url            String?
  userAgent      String?
  ip             String?
  userId         String?
  userName       String?
  sessionId      String?
  requestId      String?
  duration       Int?
  memory         Int?
  tags           String?  @db.Text
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  recordScreen   String?  @db.LongText
  recordScreenId String?

  @@index([timestamp])
  @@index([level])
  @@index([source])
  @@index([category])
  @@index([userId])
  @@index([requestId])
  @@index([recordScreenId])
  @@map("system_logs")
}

model SystemAlert {
  id            String              @id @default(uuid())
  timestamp     DateTime            @default(now())
  level         String
  source        String
  category      String
  title         String
  message       String              @db.Text
  details       String?             @db.Text
  stack         String?             @db.Text
  url           String?
  userAgent     String?
  ip            String?
  userId        String?
  userName      String?
  sessionId     String?
  requestId     String?
  tags          String?             @db.Text
  isRead        Boolean             @default(false)
  isResolved    Boolean             @default(false)
  resolvedBy    String?
  resolvedAt    DateTime?
  resolvedNote  String?             @db.Text
  emailSent     Boolean             @default(false)
  emailSentAt   DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  notifications AlertNotification[]

  @@index([timestamp])
  @@index([level])
  @@index([source])
  @@index([category])
  @@index([isRead])
  @@index([isResolved])
  @@index([userId])
  @@map("system_alerts")
}

model AlertRule {
  id              String    @id @default(uuid())
  name            String
  description     String?
  isEnabled       Boolean   @default(true)
  source          String?
  category        String?
  level           String
  conditions      String    @db.Text
  actions         String    @db.Text
  cooldown        Int       @default(300)
  lastTriggeredAt DateTime?
  triggerCount    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("alert_rules")
}

model AlertNotification {
  id        String      @id @default(uuid())
  alertId   String
  type      String
  recipient String
  content   String      @db.Text
  status    String
  error     String?
  sentAt    DateTime?
  createdAt DateTime    @default(now())
  alert     SystemAlert @relation(fields: [alertId], references: [id], onDelete: Cascade)

  @@index([alertId])
  @@index([status])
  @@index([sentAt])
  @@map("alert_notifications")
}

model PerformanceData {
  id         String   @id @default(uuid())
  timestamp  DateTime @default(now())
  source     String
  type       String
  name       String?
  value      Float?
  duration   Int?
  url        String?
  userAgent  String?
  ip         String?
  userId     String?
  userName   String?
  sessionId  String?
  requestId  String?
  deviceInfo String?  @db.Text
  pageUrl    String?
  time       BigInt?
  status     String?
  sdkVersion String?
  uuid       String?
  details    String?  @db.Text
  tags       String?  @db.Text
  apikey     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([timestamp])
  @@index([source])
  @@index([type])
  @@index([userId])
  @@index([sessionId])
  @@index([apikey])
  @@map("performance_data")
}

model TwoFactorAttempt {
  id          String   @id @default(uuid()) @db.Char(36)
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.Char(36)
  ipAddress   String?  @db.VarChar(45)
  attemptType String   @db.VarChar(20) // 'totp', 'backup_code'
  success     Boolean
  createdAt   DateTime @default(now())
}

model UserLock {
  id         String   @id @default(uuid()) @db.Char(36)
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?  @db.Char(36)
  lockType   String   @db.VarChar(20) // 'totp', 'backup_code', 'login'
  lockedUntil DateTime?
  createdAt  DateTime @default(now())
}

model TwoFactorRecovery {
  id          String   @id @default(uuid()) @db.Char(36)
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?  @db.Char(36)
  email       String   @db.VarChar(100)
  recoveryCode String  @db.VarChar(6)
  expiresAt   DateTime
  used        Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model TwoFactorLog {
  id        String   @id @default(uuid()) @db.Char(36)
  user      User?    @relation("UserLog", fields: [userId], references: [id])
  userId    String?  @db.Char(36)
  action    String   @db.VarChar(50)
  details   Json?
  admin     User?    @relation("AdminLog", fields: [adminId], references: [id])
  adminId   String?  @db.Char(36)
  createdAt DateTime @default(now())
}
