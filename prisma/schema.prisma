generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id    String           @id @default(uuid()) @db.Char(36)
  name  String           @unique @db.VarChar(50)
  perms RolePermission[]
  users User[]
}

model Permission {
  id        String           @id @default(uuid()) @db.Char(36)
  name      String           @db.VarChar(100)
  code      String           @unique @db.VarChar(100)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  roles     RolePermission[]
}

model RolePermission {
  roleId       String     @db.Char(36)
  permissionId String     @db.Char(36)
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model User {
  id           String    @id @default(uuid()) @db.Char(36)
  name         String    @db.VarChar(50)
  mail         String    @unique @db.VarChar(100)
  passwordHash String    @db.VarChar(255)
  isSuperAdmin Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  roleId       String?   @db.Char(36)
  articles     Article[]
  comments     Comment[]
  files        File[]
  role         Role?     @relation(fields: [roleId], references: [id])

  @@index([mail])
  @@index([roleId], map: "users_roleId_fkey")
  @@map("users")
}

model VerificationCode {
  id        String   @id @default(uuid())
  mail      String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("verification_codes")
}

model Category {
  id              String     @id @default(uuid())
  name            String     @unique
  description     String?
  slug            String     @unique
  parentId        String?
  status          String     @default("enabled")
  sort            Int        @default(0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  articles        Article[]
  parentCategory  Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  childCategories Category[] @relation("CategoryParent")

  @@index([parentId], map: "categories_parentId_fkey")
  @@map("categories")
}

model Tag {
  id          String       @id @default(uuid())
  name        String       @unique
  slug        String       @unique
  description String?
  color       String?
  sort        Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  articles    ArticleTag[]

  @@map("tags")
}

model Article {
  id          String       @id @default(uuid())
  title       String
  content     String       @db.Text
  excerpt     String?
  coverImage  String?
  slug        String       @unique
  published   Boolean      @default(false)
  views       Int          @default(0)
  readTime    Int?
  publishedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  authorId    String
  categoryId  String
  tags        ArticleTag[]
  author      User         @relation(fields: [authorId], references: [id])
  category    Category     @relation(fields: [categoryId], references: [id])
  comments    Comment[]
  likes       Like[]

  @@index([authorId], map: "articles_authorId_fkey")
  @@index([categoryId], map: "articles_categoryId_fkey")
  @@map("articles")
}

model ArticleTag {
  id        String  @id @default(uuid())
  articleId String
  tagId     String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([articleId, tagId])
  @@index([tagId], map: "article_tags_tagId_fkey")
  @@map("article_tags")
}

model Comment {
  id         String    @id @default(uuid())
  content    String    @db.Text
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  articleId  String
  authorId   String?
  guestName  String?
  guestEmail String?
  parentId   String?
  article    Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  author     User?     @relation(fields: [authorId], references: [id])
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentReplies")

  @@index([articleId], map: "comments_articleId_fkey")
  @@index([authorId], map: "comments_authorId_fkey")
  @@index([parentId], map: "comments_parentId_fkey")
  @@map("comments")
}

model FileFolder {
  id        String       @id @default(uuid())
  name      String
  path      String       @unique
  parentId  String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  parent    FileFolder?  @relation("FolderParent", fields: [parentId], references: [id])
  children  FileFolder[] @relation("FolderParent")
  files     File[]

  @@index([parentId], map: "file_folders_parentId_fkey")
  @@map("file_folders")
}

model File {
  id         String      @id @default(uuid())
  name       String
  filename   String
  path       String
  url        String
  size       Int
  mimetype   String
  extension  String
  folderId   String?
  uploadedBy String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  folder     FileFolder? @relation(fields: [folderId], references: [id])
  uploader   User        @relation(fields: [uploadedBy], references: [id])

  @@index([folderId], map: "files_folderId_fkey")
  @@index([uploadedBy], map: "files_uploadedBy_fkey")
  @@map("files")
}

model StickyNote {
  id        String               @id @default(uuid())
  content   String               @db.Text
  author    String
  category  String?
  color     String               @default("#fbbf24")
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  comments  InteractionComment[]
  likes     Like[]

  @@map("sticky_notes")
}

model GalleryImage {
  id          String               @id @default(uuid())
  title       String
  description String?              @db.Text
  imageUrl    String
  category    String?
  tags        String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  comments    InteractionComment[]
  likes       Like[]

  @@map("gallery_images")
}

model Like {
  id             String        @id @default(uuid())
  fingerprint    String
  targetType     String
  targetId       String
  articleId      String?
  stickyNoteId   String?
  galleryImageId String?
  userInfoId     String?
  createdAt      DateTime      @default(now())
  article        Article?      @relation(fields: [articleId], references: [id], onDelete: Cascade)
  galleryImage   GalleryImage? @relation(fields: [galleryImageId], references: [id], onDelete: Cascade)
  stickyNote     StickyNote?   @relation(fields: [stickyNoteId], references: [id], onDelete: Cascade)
  userInfo       UserInfo?     @relation(fields: [userInfoId], references: [id])

  @@unique([fingerprint, targetType, targetId])
  @@index([articleId], map: "likes_articleId_fkey")
  @@index([galleryImageId], map: "likes_galleryImageId_fkey")
  @@index([stickyNoteId], map: "likes_stickyNoteId_fkey")
  @@index([userInfoId], map: "likes_userInfoId_fkey")
  @@map("likes")
}

model InteractionComment {
  id             String               @id @default(uuid())
  content        String               @db.Text
  author         String?
  email          String?
  fingerprint    String
  targetType     String
  targetId       String
  stickyNoteId   String?
  galleryImageId String?
  parentId       String?
  userInfoId     String?
  isApproved     Boolean              @default(true)
  isDeleted      Boolean              @default(false)
  deletedAt      DateTime?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  galleryImage   GalleryImage?        @relation(fields: [galleryImageId], references: [id], onDelete: Cascade)
  parent         InteractionComment?  @relation("InteractionCommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies        InteractionComment[] @relation("InteractionCommentReplies")
  stickyNote     StickyNote?          @relation(fields: [stickyNoteId], references: [id], onDelete: Cascade)
  userInfo       UserInfo?            @relation(fields: [userInfoId], references: [id])

  @@index([galleryImageId], map: "interaction_comments_galleryImageId_fkey")
  @@index([parentId], map: "interaction_comments_parentId_fkey")
  @@index([stickyNoteId], map: "interaction_comments_stickyNoteId_fkey")
  @@index([userInfoId], map: "interaction_comments_userInfoId_fkey")
  @@map("interaction_comments")
}

model UserInfo {
  id             String               @id @default(uuid())
  fingerprint    String               @unique
  ipAddress      String?
  userAgent      String?              @db.Text
  country        String?
  region         String?
  city           String?
  latitude       Float?
  longitude      Float?
  timezone       String?
  deviceType     String?
  deviceModel    String?
  osName         String?
  osVersion      String?
  browserName    String?
  browserVersion String?
  screenWidth    Int?
  screenHeight   Int?
  language       String?
  languages      String?
  nickname       String?
  email          String?
  totalLikes     Int                  @default(0)
  totalComments  Int                  @default(0)
  lastActiveAt   DateTime             @default(now())
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  comments       InteractionComment[]
  likes          Like[]

  @@map("user_info")
}

model Admin {
  id          String    @id @default(uuid())
  username    String    @unique
  password    String
  email       String    @unique
  role        String    @default("admin")
  isActive    Boolean   @default(true)
  permissions String?   @db.Text
  lastLoginAt DateTime?
  loginCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("admins")
}

model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String   @db.Text
  type        String   @default("string")
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}

model ActivityLog {
  id          String   @id @default(uuid())
  action      String
  targetType  String
  targetId    String
  fingerprint String?
  userInfoId  String?
  adminId     String?
  details     String?  @db.Text
  ipAddress   String?
  userAgent   String?  @db.Text
  createdAt   DateTime @default(now())

  @@map("activity_logs")
}
