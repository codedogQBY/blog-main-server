generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id    String           @id @default(uuid()) @db.Char(36)
  name  String           @unique @db.VarChar(50)
  perms RolePermission[]
  users User[]
}

model Permission {
  id    String           @id @default(uuid()) @db.Char(36)
  name  String           @db.VarChar(100)
  code  String           @unique @db.VarChar(100)
  roles RolePermission[]
}

model RolePermission {
  roleId       String     @db.Char(36)
  permissionId String     @db.Char(36)
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model User {
  id           String    @id @default(uuid()) @db.Char(36)
  name         String    @db.VarChar(50)
  mail         String    @unique @db.VarChar(100)
  passwordHash String    @db.VarChar(255)
  isSuperAdmin Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  roleId String? @db.Char(36)
  role   Role?   @relation(fields: [roleId], references: [id])
  
  // 博客关联
  articles Article[]
  comments Comment[]

  @@index([mail])
  @@map("users")
}

model VerificationCode {
  id        String   @id @default(uuid())
  mail      String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("verification_codes")
}

// 博客相关模型
model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  articles    Article[]

  @@map("categories")
}

model Tag {
  id        String       @id @default(uuid())
  name      String       @unique
  slug      String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  
  articles  ArticleTag[]

  @@map("tags")
}

model Article {
  id          String    @id @default(uuid())
  title       String
  content     String    @db.Text
  excerpt     String?
  coverImage  String?
  slug        String    @unique
  published   Boolean   @default(false)
  views       Int       @default(0)
  readTime    Int?      // 阅读时间（分钟）
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // 关联
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  
  tags        ArticleTag[]
  comments    Comment[]

  @@map("articles")
}

model ArticleTag {
  id        String  @id @default(uuid())
  articleId String
  tagId     String
  
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([articleId, tagId])
  @@map("article_tags")
}

model Comment {
  id        String    @id @default(uuid())
  content   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // 关联
  articleId String
  article   Article   @relation(fields: [articleId], references: [id], onDelete: Cascade)
  authorId  String?
  author    User?     @relation(fields: [authorId], references: [id])
  
  // 游客评论
  guestName  String?
  guestEmail String?
  
  // 回复功能
  parentId   String?
  parent     Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies    Comment[] @relation("CommentReplies")

  @@map("comments")
}
