generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String           @id @default(uuid()) @db.Char(36)
  name      String           @unique @db.VarChar(50)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
  perms     RolePermission[]
  users     User[]
}

model PermissionGroup {
  id          String       @id @default(uuid()) @db.Char(36)
  name        String      @db.VarChar(100)
  code        String      @unique @db.VarChar(100)
  description String?     @db.Text
  sort        Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  permissions Permission[]

  @@map("permission_groups")
}

model Permission {
  id          String           @id @default(uuid()) @db.Char(36)
  name        String          @db.VarChar(100)
  code        String          @unique @db.VarChar(100)
  description String?         @db.Text
  groupId     String?         @db.Char(36)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  roles       RolePermission[]
  group       PermissionGroup? @relation(fields: [groupId], references: [id])

  @@index([groupId], map: "permissions_groupId_fkey")
}

model RolePermission {
  roleId       String     @db.Char(36)
  permissionId String     @db.Char(36)
  permission   Permission @relation(fields: [permissionId], references: [id])
  role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
  @@index([permissionId], map: "RolePermission_permissionId_fkey")
}

model User {
  id           String    @id @default(uuid()) @db.Char(36)
  name         String    @db.VarChar(50)
  mail         String    @unique @db.VarChar(100)
  passwordHash String    @db.VarChar(255)
  isSuperAdmin Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  roleId       String?   @db.Char(36)
  articles     Article[]
  files        File[]
  role         Role?     @relation(fields: [roleId], references: [id])

  @@index([mail])
  @@index([roleId], map: "users_roleId_fkey")
  @@map("users")
}

model VerificationCode {
  id        String   @id @default(uuid())
  mail      String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("verification_codes")
}

model Category {
  id              String     @id @default(uuid())
  name            String     @unique
  description     String?
  slug            String     @unique
  parentId        String?
  status          String     @default("enabled")
  sort            Int        @default(0)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  articles        Article[]
  parentCategory  Category?  @relation("CategoryParent", fields: [parentId], references: [id])
  childCategories Category[] @relation("CategoryParent")

  @@index([parentId], map: "categories_parentId_fkey")
  @@map("categories")
}

model Tag {
  id          String       @id @default(uuid())
  name        String       @unique
  slug        String       @unique
  description String?
  color       String?
  sort        Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  articles    ArticleTag[]

  @@map("tags")
}

model Article {
  id          String       @id @default(uuid())
  title       String
  content     String       @db.Text
  excerpt     String?
  coverImage  String?
  slug        String       @unique
  published   Boolean      @default(false)
  views       Int          @default(0)
  readTime    Int?
  publishedAt DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  authorId    String
  categoryId  String
  tags        ArticleTag[]
  author      User         @relation(fields: [authorId], references: [id])
  category    Category     @relation(fields: [categoryId], references: [id])
  likes       Like[]
  
  // SEO相关字段
  metaTitle       String?   @db.VarChar(255) // SEO标题
  metaDescription String?   @db.Text // SEO描述
  metaKeywords    String?   @db.Text // SEO关键词
  canonicalUrl    String?   @db.VarChar(500) // 规范链接

  @@index([authorId], map: "articles_authorId_fkey")
  @@index([categoryId], map: "articles_categoryId_fkey")
  @@map("articles")
}

model ArticleTag {
  id        String  @id @default(uuid())
  articleId String
  tagId     String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([articleId, tagId])
  @@index([tagId], map: "article_tags_tagId_fkey")
  @@map("article_tags")
}

model FileFolder {
  id        String       @id @default(uuid())
  name      String
  path      String       @unique
  parentId  String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  parent    FileFolder?  @relation("FolderParent", fields: [parentId], references: [id])
  children  FileFolder[] @relation("FolderParent")
  files     File[]

  @@index([parentId], map: "file_folders_parentId_fkey")
  @@map("file_folders")
}

model File {
  id         String      @id @default(uuid())
  name       String      @db.Text
  filename   String      @db.Text
  path       String      @db.Text
  url        String      @db.Text
  size       Int
  mimetype   String
  extension  String
  folderId   String?
  uploadedBy String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  folder     FileFolder? @relation(fields: [folderId], references: [id])
  uploader   User        @relation(fields: [uploadedBy], references: [id])

  @@index([folderId], map: "files_folderId_fkey")
  @@index([uploadedBy], map: "files_uploadedBy_fkey")
  @@map("files")
}

model StickyNote {
  id        String               @id @default(uuid())
  content   String               @db.Text
  author    String
  category  String?
  color     String               @default("#fbbf24")
  status    String               @default("public") // public, private
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  comments  InteractionComment[]
  likes     Like[]

  @@map("sticky_notes")
}

model DiaryNote {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(200)
  content   String   @db.Text
  excerpt   String?  @db.VarChar(500)
  images    String?  @db.Text // JSON字符串存储图片URL数组
  weather   String   @default("sunny") // sunny, cloudy, rainy, snowy, partly-cloudy
  mood      Int      @default(0) // 心情值 0-5
  status    String   @default("public") // public, private
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("diary_notes")
}

model DiarySignature {
  id           String   @id @default(uuid())
  signatureName String  @db.VarChar(50)
  fontFamily   String   @default("'Kalam', cursive")
  fontSize     String   @default("2xl")
  color        String   @default("gray-400")
  rotation     String   @default("12") // 旋转角度
  isActive     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("diary_signatures")
}

model DiaryWeatherConfig {
  id           String   @id @default(uuid())
  weatherType  String   @unique // sunny, cloudy, rainy, snowy, partly-cloudy
  weatherName  String   @db.VarChar(32)
  icon         String?  @db.VarChar(100)
  description  String?  @db.VarChar(200)
  isEnabled    Boolean  @default(true)
  sort         Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("diary_weather_config")
}

model Gallery {
  id          String               @id @default(uuid())
  title       String
  description String?              @db.Text
  category    String?
  tags        String?              @db.Text // JSON字符串
  coverImage  String?              // 封面图片URL
  status      String               @default("published") // published, draft
  sort        Int                  @default(0)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  images      GalleryImage[]       // 图集包含的图片
  comments    InteractionComment[] @relation("GalleryComments")
  likes       Like[]               @relation("GalleryLikes")

  @@map("galleries")
}

model GalleryImage {
  id          String               @id @default(uuid())
  title       String?
  description String?              @db.Text
  imageUrl    String
  sort        Int                  @default(0)
  galleryId   String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  gallery     Gallery              @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  @@index([galleryId], map: "gallery_images_galleryId_fkey")
  @@map("gallery_images")
}

model Like {
  id             String        @id @default(uuid())
  fingerprint    String
  targetType     String
  targetId       String
  articleId      String?
  stickyNoteId   String?
  galleryId      String?
  userInfoId     String?
  createdAt      DateTime      @default(now())
  article        Article?      @relation(fields: [articleId], references: [id], onDelete: Cascade)
  gallery        Gallery?      @relation("GalleryLikes", fields: [galleryId], references: [id], onDelete: Cascade)
  stickyNote     StickyNote?   @relation(fields: [stickyNoteId], references: [id], onDelete: Cascade)
  userInfo       UserInfo?     @relation(fields: [userInfoId], references: [id])

  @@unique([fingerprint, targetType, targetId])
  @@index([articleId], map: "likes_articleId_fkey")
  @@index([galleryId], map: "likes_galleryId_fkey")
  @@index([stickyNoteId], map: "likes_stickyNoteId_fkey")
  @@index([userInfoId], map: "likes_userInfoId_fkey")
  @@map("likes")
}

model InteractionComment {
  id             String               @id @default(uuid())
  content        String               @db.Text
  author         String?
  email          String?
  fingerprint    String
  targetType     String
  targetId       String
  stickyNoteId   String?
  galleryId      String?
  parentId       String?
  userInfoId     String?
  isApproved     Boolean              @default(true)
  isDeleted      Boolean              @default(false)
  deletedAt      DateTime?
  isAdmin        Boolean              @default(false) // 是否为管理员评论
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  gallery        Gallery?             @relation("GalleryComments", fields: [galleryId], references: [id], onDelete: Cascade)
  parent         InteractionComment?  @relation("InteractionCommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies        InteractionComment[] @relation("InteractionCommentReplies")
  stickyNote     StickyNote?          @relation(fields: [stickyNoteId], references: [id], onDelete: Cascade)
  userInfo       UserInfo?            @relation(fields: [userInfoId], references: [id])

  @@index([galleryId], map: "interaction_comments_galleryId_fkey")
  @@index([parentId], map: "interaction_comments_parentId_fkey")
  @@index([stickyNoteId], map: "interaction_comments_stickyNoteId_fkey")
  @@index([userInfoId], map: "interaction_comments_userInfoId_fkey")
  @@map("interaction_comments")
}

model UserInfo {
  id             String               @id @default(uuid())
  fingerprint    String               @unique
  ipAddress      String?
  userAgent      String?              @db.Text
  country        String?
  region         String?
  city           String?
  latitude       Float?
  longitude      Float?
  timezone       String?
  deviceType     String?
  deviceModel    String?
  osName         String?
  osVersion      String?
  browserName    String?
  browserVersion String?
  screenWidth    Int?
  screenHeight   Int?
  language       String?
  languages      String?
  nickname       String?
  email          String?
  totalLikes     Int                  @default(0)
  totalComments  Int                  @default(0)
  lastActiveAt   DateTime             @default(now())
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  comments       InteractionComment[]
  likes          Like[]

  @@map("user_info")
}

model Admin {
  id          String    @id @default(uuid())
  username    String    @unique
  password    String
  email       String    @unique
  role        String    @default("admin")
  isActive    Boolean   @default(true)
  permissions String?   @db.Text
  lastLoginAt DateTime?
  loginCount  Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("admins")
}

model SystemConfig {
  id          String   @id @default(uuid())
  key         String   @unique
  value       String   @db.Text
  type        String   @default("string")
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_config")
}

model ActivityLog {
  id          String   @id @default(uuid())
  action      String
  targetType  String
  targetId    String
  fingerprint String?
  userInfoId  String?
  adminId     String?
  details     String?  @db.Text
  ipAddress   String?
  userAgent   String?  @db.Text
  createdAt   DateTime @default(now())

  @@map("activity_logs")
}

model About {
  id              String          @id @default(uuid())
  heroAvatar      String?         @db.Text
  heroSignature   String?         @db.VarChar(200)
  introTitle      String          @db.VarChar(200)
  introContent    String          @db.Text // JSON数组存储多段内容
  introLogo       String?         @db.Text
  status          String          @default("active") // active, inactive
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  tags            AboutTag[]
  sections        AboutSection[]

  @@map("about")
}

model AboutTag {
  id        String   @id @default(uuid())
  content   String   @db.VarChar(100)
  position  String   @default("left") // left, right
  sort      Int      @default(0)
  aboutId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  about     About    @relation(fields: [aboutId], references: [id], onDelete: Cascade)

  @@index([aboutId], map: "about_tags_aboutId_fkey")
  @@map("about_tags")
}

model AboutSection {
  id        String        @id @default(uuid())
  title     String        @db.VarChar(200)
  content   String        @db.Text // JSON数组存储多段内容
  sort      Int           @default(0)
  aboutId   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  about     About         @relation(fields: [aboutId], references: [id], onDelete: Cascade)
  images    AboutImage[]

  @@index([aboutId], map: "about_sections_aboutId_fkey")
  @@map("about_sections")
}

model AboutImage {
  id        String       @id @default(uuid())
  src       String       @db.Text
  alt       String       @db.VarChar(200)
  caption   String       @db.VarChar(200)
  sort      Int          @default(0)
  sectionId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  section   AboutSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)

  @@index([sectionId], map: "about_images_sectionId_fkey")
  @@map("about_images")
}

model FriendLink {
  id          String   @id @default(cuid())
  name        String   @db.VarChar(50)
  url         String   @db.VarChar(255)
  logo        String?  @db.VarChar(255)
  description String?  @db.VarChar(255)
  status      Int      @default(1) // 1: 正常, 0: 禁用
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  auditStatus Int      @default(0) // 0: 待审核, 1: 已通过, 2: 已拒绝
  email       String?  @db.VarChar(255) // 申请人邮箱，用于通知审核结果

  @@map("friend_links")
}

// 日志表
model SystemLog {
  id          String      @id @default(uuid())
  timestamp   DateTime    @default(now())
  level       String      // error, warn, info, debug
  source      String      // frontend, admin, backend
  category    String      // js_error, api_error, performance, behavior, system
  message     String      @db.Text
  details     String?     @db.Text // JSON格式的详细信息
  stack       String?     @db.Text // 错误堆栈
  url         String?     // 页面URL
  userAgent   String?     // 用户代理
  ip          String?     // IP地址
  userId      String?     // 用户ID（如果已登录）
  userName    String?     // 用户名
  sessionId   String?     // 会话ID
  requestId   String?     // 请求ID（用于关联同一请求的多个日志）
  duration    Int?        // 执行时长（毫秒）
  memory      Int?        // 内存使用（MB）
  tags        String?     @db.Text // JSON格式的标签
  // 录屏相关字段
  recordScreenId String?  // 录屏ID
  recordScreen   String?  @db.LongText // 录屏数据（JSON格式）
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([timestamp])
  @@index([level])
  @@index([source])
  @@index([category])
  @@index([userId])
  @@index([requestId])
  @@index([recordScreenId])
  @@map("system_logs")
}

// 告警表
model SystemAlert {
  id          String      @id @default(uuid())
  timestamp   DateTime    @default(now())
  level       String      // critical, error, warning, info
  source      String      // frontend, admin, backend
  category    String      // js_error, api_error, performance, security, system
  title       String      // 告警标题
  message     String      @db.Text // 告警内容
  details     String?     @db.Text // JSON格式的详细信息
  stack       String?     @db.Text // 错误堆栈
  url         String?     // 页面URL
  userAgent   String?     // 用户代理
  ip          String?     // IP地址
  userId      String?     // 用户ID（如果已登录）
  userName    String?     // 用户名
  sessionId   String?     // 会话ID
  requestId   String?     // 请求ID
  tags        String?     @db.Text // JSON格式的标签
  isRead      Boolean     @default(false) // 是否已读
  isResolved  Boolean     @default(false) // 是否已处理
  resolvedBy  String?     // 处理人
  resolvedAt  DateTime?   // 处理时间
  resolvedNote String?    @db.Text // 处理备注
  emailSent   Boolean     @default(false) // 是否已发送邮件
  emailSentAt DateTime?   // 邮件发送时间
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // 关系字段
  notifications AlertNotification[]

  @@index([timestamp])
  @@index([level])
  @@index([source])
  @@index([category])
  @@index([isRead])
  @@index([isResolved])
  @@index([userId])
  @@map("system_alerts")
}

// 告警规则表
model AlertRule {
  id          String      @id @default(uuid())
  name        String      // 规则名称
  description String?     // 规则描述
  isEnabled   Boolean     @default(true) // 是否启用
  source      String?     // 来源（frontend, admin, backend, all）
  category    String?     // 类别
  level       String      // 触发级别
  conditions  String      @db.Text // JSON格式的触发条件
  actions     String      @db.Text // JSON格式的动作（如发送邮件）
  cooldown    Int         @default(300) // 冷却时间（秒）
  lastTriggeredAt DateTime? // 上次触发时间
  triggerCount Int        @default(0) // 触发次数
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("alert_rules")
}

// 告警通知记录表
model AlertNotification {
  id          String      @id @default(uuid())
  alertId     String      // 关联的告警ID
  type        String      // email, sms, webhook等
  recipient   String      // 接收者（邮箱、手机号等）
  content     String      @db.Text // 通知内容
  status      String      // sent, failed, pending
  error       String?     // 发送失败的错误信息
  sentAt      DateTime?   // 发送时间
  createdAt   DateTime    @default(now())

  alert       SystemAlert @relation(fields: [alertId], references: [id], onDelete: Cascade)

  @@index([alertId])
  @@index([status])
  @@index([sentAt])
  @@map("alert_notifications")
}

// 性能数据表
model PerformanceData {
  id          String      @id @default(uuid())
  timestamp   DateTime    @default(now())
  source      String      // frontend, admin
  type        String      // longTask, firstInput, largestContentfulPaint, firstPaint, firstContentfulPaint, layoutShift
  name        String?     // 性能指标名称
  value       Float?      // 性能指标值
  duration    Int?        // 持续时间（毫秒）
  url         String?     // 页面URL
  userAgent   String?     // 用户代理
  ip          String?     // IP地址
  userId      String?     // 用户ID
  userName    String?     // 用户名
  sessionId   String?     // 会话ID
  requestId   String?     // 请求ID
  deviceInfo  String?     @db.Text // JSON格式的设备信息
  pageUrl     String?     // 页面URL
  time        BigInt?     // 时间戳
  status      String?     // 状态
  sdkVersion  String?     // SDK版本
  uuid        String?     // 唯一标识
  details     String?     @db.Text // JSON格式的详细信息
  tags        String?     @db.Text // JSON格式的标签
  apikey      String?     // API密钥
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([timestamp])
  @@index([source])
  @@index([type])
  @@index([userId])
  @@index([sessionId])
  @@index([apikey])
  @@map("performance_data")
}
